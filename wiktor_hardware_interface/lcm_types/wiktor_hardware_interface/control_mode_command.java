/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package wiktor_hardware_interface;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class control_mode_command implements lcm.lcm.LCMEncodable
{
    public wiktor_hardware_interface.joint_impedance_parameters joint_impedance_params;
    public wiktor_hardware_interface.cartesian_impedance_parameters cartesian_impedance_params;
    public wiktor_hardware_interface.cartesian_control_mode_limits cartesian_control_mode_limits;
    public wiktor_hardware_interface.path_execution_parameters path_execution_params;
    public double timestamp;
    public byte control_mode;
 
    public control_mode_command()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x840382f3e1c6c4b6L;
 
    public static final byte IS_POSITION_MOTION = (byte) 0;
    public static final byte IS_CARTESIAN_MOTION = (byte) 1;
    public static final byte IS_IMPEDANCE_CONTROL = (byte) 2;
    public static final byte JOINT_POSITION = (byte) 0;
    public static final byte JOINT_IMPEDANCE = (byte) 2;
    public static final byte CARTESIAN_POSE = (byte) 1;
    public static final byte CARTESIAN_IMPEDANCE = (byte) 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(wiktor_hardware_interface.control_mode_command.class))
            return 0L;
 
        classes.add(wiktor_hardware_interface.control_mode_command.class);
        long hash = LCM_FINGERPRINT_BASE
             + wiktor_hardware_interface.joint_impedance_parameters._hashRecursive(classes)
             + wiktor_hardware_interface.cartesian_impedance_parameters._hashRecursive(classes)
             + wiktor_hardware_interface.cartesian_control_mode_limits._hashRecursive(classes)
             + wiktor_hardware_interface.path_execution_parameters._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.joint_impedance_params._encodeRecursive(outs); 
 
        this.cartesian_impedance_params._encodeRecursive(outs); 
 
        this.cartesian_control_mode_limits._encodeRecursive(outs); 
 
        this.path_execution_params._encodeRecursive(outs); 
 
        outs.writeDouble(this.timestamp); 
 
        outs.writeByte(this.control_mode); 
 
    }
 
    public control_mode_command(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public control_mode_command(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static wiktor_hardware_interface.control_mode_command _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        wiktor_hardware_interface.control_mode_command o = new wiktor_hardware_interface.control_mode_command();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.joint_impedance_params = wiktor_hardware_interface.joint_impedance_parameters._decodeRecursiveFactory(ins);
 
        this.cartesian_impedance_params = wiktor_hardware_interface.cartesian_impedance_parameters._decodeRecursiveFactory(ins);
 
        this.cartesian_control_mode_limits = wiktor_hardware_interface.cartesian_control_mode_limits._decodeRecursiveFactory(ins);
 
        this.path_execution_params = wiktor_hardware_interface.path_execution_parameters._decodeRecursiveFactory(ins);
 
        this.timestamp = ins.readDouble();
 
        this.control_mode = ins.readByte();
 
    }
 
    public wiktor_hardware_interface.control_mode_command copy()
    {
        wiktor_hardware_interface.control_mode_command outobj = new wiktor_hardware_interface.control_mode_command();
        outobj.joint_impedance_params = this.joint_impedance_params.copy();
 
        outobj.cartesian_impedance_params = this.cartesian_impedance_params.copy();
 
        outobj.cartesian_control_mode_limits = this.cartesian_control_mode_limits.copy();
 
        outobj.path_execution_params = this.path_execution_params.copy();
 
        outobj.timestamp = this.timestamp;
 
        outobj.control_mode = this.control_mode;
 
        return outobj;
    }
 
}

